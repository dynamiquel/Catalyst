using System.Globalization;
using System.Text;
using Catalyst.SpecGraph.Nodes;
using Catalyst.SpecGraph.Properties;

namespace Catalyst.LanguageCompilers.CSharp;


// Just raw dog it for now.
public class CSharpLanguageCompiler : LanguageCompiler
{
    public override string CompilerName => CSharpLanguage.Name;

    public readonly bool bUseRequiredForNonOptional = false;


    public override CompiledFile CompileFile(File file)
    {
        StringBuilder sb = new();
        
        sb.AppendLine("//");
        sb.AppendLine($"// This file was generated by Catalyst's C# compiler at {DateTime.Now}.");
        sb.AppendLine("// It is recommended not to modify this file. Modify the source spec file instead.");
        sb.AppendLine("//");
        sb.AppendLine();

        if (file.Includes.Count > 0)
        {
            foreach (Include include in file.Includes)
                sb.AppendLine($"using {include.Path};");
            sb.AppendLine();
        }

        if (!string.IsNullOrWhiteSpace(file.Namespace))
            sb.AppendLine($"namespace {file.Namespace};").AppendLine();

        foreach (Class def in file.Classes)
        {
            CSharpClassType classType = ((CSharpDefinitionCompilerOptionsNode)def.CompilerOptions!).Type;
            string classTypeStr = classType == CSharpClassType.Class ? "class" : "record";
            sb.AppendLine($"public {classTypeStr} {def.Name}").AppendLine("{");

            foreach (Property property in def.Properties)
            {
                /*if (property.Attributes.Count > 0)
                {
                    sb.Append("    ");
                    foreach (Attribute attribute in property.Attributes)
                    {
                        sb.Append($"[{attribute.Name}");
                        if (!string.IsNullOrWhiteSpace(attribute.Arguments))
                            sb.Append($"({attribute.Arguments})");
                        sb.AppendLine("]");
                    }
                }*/

                sb.Append("    public");
                if (bUseRequiredForNonOptional && !property.Type.Name.EndsWith("?") && property.Value is NoPropertyValue)
                    sb.Append(" required");

                sb.Append($" {property.Type.Name} {property.Name} {{ get; set; }}");
                
                if (property.Value is not NoPropertyValue)
                    sb.Append($" = {property.Value.Value};");
                
                sb.AppendLine();
                sb.AppendLine();
            }

            foreach (Function function in def.Functions)
            {
                sb.AppendLine();
                
                sb.Append("    public ");
                
                if (function.Flags is FunctionFlags.Static)
                    sb.Append("static ");

                sb.Append($"{function.ReturnType} {function.Name}(");

                for (int parameterIdx = 0; parameterIdx < function.Parameters.Count; parameterIdx++)
                {
                    sb.Append(function.Parameters[parameterIdx]);
                    if (parameterIdx < function.Parameters.Count - 1)
                        sb.Append(", ");
                }
                
                sb.AppendLine(")");
                
                sb.AppendLine("    {");

                sb.AppendLine($"        {function.Body}");
                
                sb.AppendLine("    }");
            }

            sb.AppendLine("}").AppendLine();
        }

        return new CompiledFile(file.Name, sb.ToString());
    }

    protected override string GetCompiledFilePath(FileNode fileNode)
    {
        string newFilePath = Path.Combine(fileNode.Directory ?? string.Empty, fileNode.FileName.ToPascalCase() + ".cs");
        return newFilePath;
    }

    protected override string? GetCompiledNamespace(FileNode fileNode)
    {
        return fileNode.Namespace.ToPascalCase();
    }
    
    protected override string GetCompiledClassName(DefinitionNode definitionNode)
    {
        return definitionNode.Name.ToPascalCase();
    }

    protected override Include? GetCompiledIncludeForPropertyType(File file, IPropertyType propertyType)
    {
        switch (propertyType)
        {
            case ListType:
            case MapType:
            case SetType:
                return new Include("System.Collections.Generic");
            default:
                return null;
        }
    }
    

    protected override string GetCompiledPropertyName(PropertyNode propertyNode)
    {
        return propertyNode.Name.ToPascalCase();
    }

    protected override PropertyType GetCompiledPropertyType(IPropertyType propertyType)
    {
        PropertyType genPropertyType;
        switch (propertyType)
        {
            case AnyType:
                genPropertyType = new PropertyType("object");
                break;
            case BooleanType:
                genPropertyType = new PropertyType("bool");
                break;
            case DateType:
                genPropertyType = new PropertyType("DateTime");
                break;
            case FloatType:
                genPropertyType = new PropertyType("double");
                break;
            case IntegerType:
                genPropertyType = new PropertyType("int");
                break;
            case ListType listType:
                PropertyType innerListPropertyType = GetCompiledPropertyType(listType.InnerType);
                genPropertyType = new PropertyType($"List<{innerListPropertyType.Name}>");
                break;
            case MapType mapType:
                PropertyType innerKeyPropertyType = GetCompiledPropertyType(mapType.InnerTypeA);
                PropertyType innerValuePropertyType = GetCompiledPropertyType(mapType.InnerTypeB);
                genPropertyType = new PropertyType($"Dictionary<{innerKeyPropertyType.Name}, {innerValuePropertyType.Name}>");
                break;
            case SetType setType:
                PropertyType innerSetPropertyType = GetCompiledPropertyType(setType.InnerType);
                genPropertyType = new PropertyType($"HashSet<{innerSetPropertyType.Name}>");
                break;
            case StringType:
                genPropertyType = new PropertyType("string");
                break;
            case TimeType:
                genPropertyType = new PropertyType("TimeSpan");
                break;
            case ObjectType userType:
                genPropertyType = new PropertyType(userType.Name.ToPascalCase());
                break;
            default:
                throw new ArgumentOutOfRangeException(nameof(propertyType));
        }

        if (propertyType is IOptionalPropertyType)
            genPropertyType = new PropertyType($"{genPropertyType.Name}?");

        return genPropertyType;
    }

    protected override PropertyValue GetCompiledDefaultValueForPropertyType(IPropertyType propertyType)
    {
        if (bUseRequiredForNonOptional)
            return new NoPropertyValue();

        return propertyType switch
        {
            IOptionalPropertyType => new NoPropertyValue(),
            AnyType or ObjectType => new SomePropertyValue("new()"),
            ListType or MapType or SetType => new SomePropertyValue("[]"),
            StringType => new SomePropertyValue("string.Empty"),
            _ => new NoPropertyValue()
        };
    }

    protected override PropertyValue GetCompiledDesiredPropertyValue(IPropertyValue propertyValue)
    {
        switch (propertyValue)
        {
            case BooleanValue booleanValue:
                return new SomePropertyValue(booleanValue.Value ? "true" : "false");
            case DateValue dateValue:
                return new SomePropertyValue($"DateTime.Parse(\"{dateValue.Value:O}\")");
            case FloatValue floatValue:
                return new SomePropertyValue(floatValue.Value.ToString(CultureInfo.InvariantCulture));
            case IntegerValue integerValue:
                return new SomePropertyValue(integerValue.Value.ToString(CultureInfo.InvariantCulture));
            case ListValue listValue:
                StringBuilder sb = new();
                sb.Append('[');
                for (int itemIdx = 0; itemIdx < listValue.Values.Count; itemIdx++)
                {
                    IPropertyValue itemValue = listValue.Values[itemIdx];
                    sb.Append(GetCompiledDesiredPropertyValue(itemValue));
                    if (itemIdx < listValue.Values.Count - 1)
                        sb.Append(", ");
                }
                sb.Append(']');
                return new SomePropertyValue(sb.ToString());
            case MapValue mapValue:
                throw new NotImplementedException();
            case NullValue nullValue:
                return new SomePropertyValue("null");
            case ObjectValue objectValue:
                throw new NotImplementedException();
            case StringValue stringValue:
                return new SomePropertyValue($"\"{stringValue.Value}\"");
            case TimeValue timeValue:
                return new SomePropertyValue($"TimeSpan.FromSeconds({timeValue.Value.TotalSeconds.ToString(CultureInfo.InvariantCulture)})");
            default:
                throw new ArgumentOutOfRangeException();
        }
    }
    
    protected override IEnumerable<Function> CreateSerialiseFunction(File file, DefinitionNode definitionNode)
    {
        return [
            new Function(
                Name: "ToBytes",
                ReturnType: "byte[]",
                Flags: FunctionFlags.Static,
                Parameters: [$"{definitionNode.Name.ToPascalCase()} obj"],
                Body: "return System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(obj);")
        ];
    }

    protected override IEnumerable<Function> CreateDeserialiseFunction(File file, DefinitionNode definitionNode)
    {
        return [
            new Function(
                Name: "FromBytes",
                ReturnType: $"{definitionNode.Name.ToPascalCase()}?",
                Flags: FunctionFlags.Static,
                Parameters: ["byte[] bytes"],
                Body: $"return System.Text.Json.JsonSerializer.Deserialize<{definitionNode.Name.ToPascalCase()}>(bytes);")
        ];
    }
}