using System.Text;
using Catalyst.SpecGraph.Properties;
using Catalyst.SpecGraph.Nodes;

namespace Catalyst.Generators.CSharp;

public class CSharpCompiler : Compiler
{
    public override string Name => CSharp.Name;

    public CSharpCompiler(CompilerOptions options) : base(options)
    {
    }

    public override CompiledFile Compile(BuiltFile file)
    {
        StringBuilder sb = new();
        
        sb.AppendLine("//");
        sb.AppendLine($"// This file was generated by Catalyst's C# compiler at {DateTime.Now}.");
        sb.AppendLine("// It is recommended not to modify this file. Modify the source spec file instead.");
        sb.AppendLine("//");
        sb.AppendLine();
        
        if (file.Includes.Count > 0)
        {
            foreach (BuiltInclude include in file.Includes)
                sb.AppendLine($"using {include.Path};");
            sb.AppendLine();
        }
        
        if (!string.IsNullOrWhiteSpace(file.Namespace))
            sb.AppendLine($"namespace {file.Namespace};").AppendLine();

        foreach (var builtEnum in file.Enums)
        {
            AppendDescriptionComment(sb, builtEnum.Node);

            if (builtEnum.Node.Flags == true)
                sb.AppendLine("[Flags]");
            
            sb
                .AppendLine($"[JsonConverter(typeof(JsonStringEnumConverter<{builtEnum.Name}>))]")
                .AppendLine($"public enum {builtEnum.Name}")
                .AppendLine("{");

            for (var enumValueIdx = 0; enumValueIdx < builtEnum.Values.Count; enumValueIdx++)
            {
                BuiltEnumValue builtEnumValue = builtEnum.Values[enumValueIdx];
                sb.Append($"    {builtEnumValue.Label} = {builtEnumValue.Value}");

                if (enumValueIdx < builtEnum.Values.Count - 1)
                    sb.Append(',');
                
                sb.AppendLine();
            }

            sb.AppendLine("}");
            sb.AppendLine();
        }

        for (var defIdx = 0; defIdx < file.Definitions.Count; defIdx++)
        {
            BuiltDefinition def = file.Definitions[defIdx];
            
            AppendDescriptionComment(sb, def.Node);

            CSharpClassType classType = def.Node.FindCompilerOptions<CSharpDefinitionOptionsNode>()!.Type;
            string classTypeStr = classType == CSharpClassType.Class ? "class" : "record";
            sb.AppendLine($"public {classTypeStr} {def.Name}").AppendLine("{");

            for (var propertyIdx = 0; propertyIdx < def.Properties.Count; propertyIdx++)
            {
                BuiltProperty property = def.Properties[propertyIdx];
                /*if (property.Attributes.Count > 0)
                {
                    sb.Append("    ");
                    foreach (Attribute attribute in property.Attributes)
                    {
                        sb.Append($"[{attribute.Name}");
                        if (!string.IsNullOrWhiteSpace(attribute.Arguments))
                            sb.Append($"({attribute.Arguments})");
                        sb.AppendLine("]");
                    }
                }*/

                AppendDescriptionComment(sb, property.Node, 1);

                bool useRequired = property.Node.FindCompilerOptions<CSharpPropertyOptionsNode>()!.UseRequired;

                sb.Append("    public");
                if (useRequired && !property.Type.Name.EndsWith("?"))
                    sb.Append(" required");

                sb.Append($" {property.Type.Name} {property.Name} {{ get; set; }}");

                if (!useRequired && property.Value is not NoPropertyValue)
                    sb.Append($" = {property.Value.Value};");

                sb.AppendLine();

                if (propertyIdx < def.Properties.Count - 1)
                    sb.AppendLine();
            }

            foreach (BuiltFunction function in def.Functions)
            {
                sb.AppendLine();

                sb.Append("    public ");

                if (function.Flags is FunctionFlags.Static)
                    sb.Append("static ");

                sb.Append($"{function.ReturnType} {function.Name}(");

                for (int parameterIdx = 0; parameterIdx < function.Parameters.Count; parameterIdx++)
                {
                    sb.Append(function.Parameters[parameterIdx]);
                    if (parameterIdx < function.Parameters.Count - 1)
                        sb.Append(", ");
                }

                sb.AppendLine(")");

                sb.AppendLine("    {");

                sb.AppendLine($"        {function.Body}");

                sb.AppendLine("    }");
            }

            sb.AppendLine("}");
            
            if (defIdx < file.Definitions.Count - 1)
                sb.AppendLine();
        }

        // TODO: Redo BuiltService and BuiltEndpoint. The implementation details should be generated
        // in the Build stage, not the Compile stage.
        if (ClientServiceBuilder is not null)
            foreach (BuiltService service in file.Services)
                ClientServiceBuilder.Compile(file, service, sb);
        
        if (ServerServiceBuilder is not null)
            foreach (BuiltService service in file.Services)
                ServerServiceBuilder.Compile(file, service, sb);
        
        return new CompiledFile(file.Name, sb.ToString());
    }

    public override BuiltInclude? GetCompiledIncludeForType(BuiltFile file, IPropertyType propertyType)
    {
        return propertyType switch
        {
            ListType or MapType or SetType => new BuiltInclude("System.Collections.Generic"),
            EnumType => new BuiltInclude("System.Text.Json.Serialization"),
            _ => null
        };
    }

    public override BuiltPropertyType GetCompiledPropertyType(IPropertyType propertyType)
    {
        BuiltPropertyType genPropertyType;
        switch (propertyType)
        {
            case AnyType:
                genPropertyType = new BuiltPropertyType("object");
                break;
            case BooleanType:
                genPropertyType = new BuiltPropertyType("bool");
                break;
            case DateType:
                genPropertyType = new BuiltPropertyType("DateTime");
                break;
            case FloatType:
                genPropertyType = new BuiltPropertyType("double");
                break;
            case IntegerType:
                genPropertyType = new BuiltPropertyType("int");
                break;
            case ListType listType:
                BuiltPropertyType innerListPropertyType = GetCompiledPropertyType(listType.InnerType);
                genPropertyType = new BuiltPropertyType($"List<{innerListPropertyType.Name}>");
                break;
            case MapType mapType:
                BuiltPropertyType innerKeyPropertyType = GetCompiledPropertyType(mapType.InnerTypeA);
                BuiltPropertyType innerValuePropertyType = GetCompiledPropertyType(mapType.InnerTypeB);
                genPropertyType = new BuiltPropertyType($"Dictionary<{innerKeyPropertyType.Name}, {innerValuePropertyType.Name}>");
                break;
            case SetType setType:
                BuiltPropertyType innerSetPropertyType = GetCompiledPropertyType(setType.InnerType);
                genPropertyType = new BuiltPropertyType($"HashSet<{innerSetPropertyType.Name}>");
                break;
            case StringType:
                genPropertyType = new BuiltPropertyType("string");
                break;
            case TimeType:
                genPropertyType = new BuiltPropertyType("TimeSpan");
                break;
            case IUserPropertyType userType:
                genPropertyType = new BuiltPropertyType(userType.Name.ToPascalCase());
                break;
            default:
                throw new ArgumentOutOfRangeException(nameof(propertyType));
        }

        if (propertyType is IOptionalPropertyType)
            genPropertyType = new BuiltPropertyType($"{genPropertyType.Name}?");

        return genPropertyType;
    }

    public override string? GetCompiledNamespace(string? namespaceName)
    {
        return namespaceName.ToPascalCase();
    }

    public override string GetCompiledClassName(string className)
    {
        return className.ToPascalCase();
    }
    
    public StringBuilder AppendDescriptionComment(StringBuilder sb, INodeDescription node, int indentation = 0)
    {
        if (string.IsNullOrEmpty(node.Description)) 
            return sb;

        for (int indent = 0; indent < indentation; indent++)
            sb.Append("    ");
        sb.AppendLine("/// <summary>");
        
        string[] descLines = node.Description.Split('\n');
        foreach (string descLine in descLines)
        {
            for (int indent = 0; indent < indentation; indent++)
                sb.Append("    ");
            sb.AppendLine($"/// {descLine}");
        }

        for (int indent = 0; indent < indentation; indent++)
            sb.Append("    ");
        sb.AppendLine("/// </summary>");

        return sb;
    }
}